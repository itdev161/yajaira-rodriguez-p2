[{"/Users/yajaira/Code/matc/itdev161/yajaira-rodriguez-p2/todo/src/index.js":"1","/Users/yajaira/Code/matc/itdev161/yajaira-rodriguez-p2/todo/src/App.js":"2","/Users/yajaira/Code/matc/itdev161/yajaira-rodriguez-p2/todo/src/reportWebVitals.js":"3","/Users/yajaira/Code/matc/itdev161/yajaira-rodriguez-p2/todo/src/Todo.js":"4"},{"size":500,"mtime":1608155572492,"results":"5","hashOfConfig":"6"},{"size":331,"mtime":1608158085615,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1608155572494,"results":"8","hashOfConfig":"6"},{"size":3311,"mtime":1608158022930,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"hjlvdt",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"/Users/yajaira/Code/matc/itdev161/yajaira-rodriguez-p2/todo/src/index.js",[],["20","21"],"/Users/yajaira/Code/matc/itdev161/yajaira-rodriguez-p2/todo/src/App.js",[],"/Users/yajaira/Code/matc/itdev161/yajaira-rodriguez-p2/todo/src/reportWebVitals.js",[],"/Users/yajaira/Code/matc/itdev161/yajaira-rodriguez-p2/todo/src/Todo.js",["22"],"import React, { Component } from \"react\";\n\nclass Todo extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      edit: false,\n      id: null,\n      mockData: [\n        {\n          id: \"1\",\n          title: \"ITDEV 161 P2 \",\n          done: false,\n          date: new Date(),\n        },\n        {\n          id: \"2\",\n          title: \"Return Books  \",\n          done: false,\n          date: new Date(),\n        },\n        {\n          id: \"3\",\n          title: \"Dinner w. family \",\n          done: false,\n          date: new Date(),\n        },\n        {\n          id: \"4\",\n          title: \"Go for a run  \",\n          done: false,\n          date: new Date(),\n        },\n      ],\n    };\n  }\n\n  onSubmitHandle(event) {\n    event.preventDefault();\n\n    this.setState({\n      mockData: [\n        ...this.state.mockData,\n        {\n          id: Date.now(),\n          title: event.target.item.value,\n          done: false,\n          date: new Date(),\n        },\n      ],\n    });\n\n    event.target.item.value = \"\";\n  }\n\n  onDeleteHandle() {\n    let id = arguments[0];\n\n    this.setState({\n      mockData: this.state.mockData.filter((item) => {\n        if (item.id !== id) {\n          return item;\n        }\n      })\n    });\n  }\n\n  onEditHandle(event) {\n    this.setState({\n      edit: true,\n      id: arguments[0],\n      title: arguments[1],\n    });\n  }\n\n  onUpdateHandle(event) {\n    event.preventDefault();\n\n    this.setState({\n      mockData: this.state.mockData.map((item) => {\n        if (item.id === this.state.id) {\n          item[\"title\"] = event.target.updatedItem.value;\n          return item;\n        }\n\n        return item;\n      }),\n    });\n\n    this.setState({\n      edit: false,\n    });\n  }\n\n  onCompleteHandle() {\n    let id = arguments[0];\n\n    this.setState({\n      mockData: this.state.mockData.map((item) => {\n        if (item.id === id) {\n          item[\"done\"] = true;\n          return item;\n        }\n\n        return item;\n      }),\n    });\n  }\n\n  renderEditForm() {\n    if (this.state.edit) {\n      return (\n        <form onSubmit={this.onUpdateHandle.bind(this)}>\n          <input\n            type=\"text\"\n            name=\"updatedItem\"\n            className=\"item\"\n            defaultValue={this.state.title}\n          />\n          <button className=\"update-add-item\">Update</button>\n        </form>\n      );\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>To Do List App</h1>\n        {this.renderEditForm()}\n        <form onSubmit={this.onSubmitHandle.bind(this)}>\n          <input type=\"text\" name=\"item\" className=\"item\" />\n          <button className=\"btn-add-item\">Add</button>\n        </form>\n        <ul>\n          {this.state.mockData.map((item) => (\n            <li key={item.id} className={item.done ? \"done\" : \"hidden\"}>\n              {item.title}\n              <button onClick={this.onDeleteHandle.bind(this, item.id)}>\n                Delete\n              </button>\n              <button\n                onClick={this.onEditHandle.bind(this, item.id, item.title)}\n              >\n                Edit\n              </button>\n              <button onClick={this.onCompleteHandle.bind(this, item.id)}>\n                Complete\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default Todo;\n",{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","severity":1,"message":"28","line":61,"column":51,"nodeType":"29","messageId":"30","endLine":61,"endColumn":53},"no-native-reassign",["31"],"no-negated-in-lhs",["32"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-global-assign","no-unsafe-negation"]